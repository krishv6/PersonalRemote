5/9/2017
--------
# Notes
_ in REPL would print the last variable printed
Indendation : 4 spaces 
Colon indicates we are going to indendate in the next line
Python Standard Library : Battery included

# To import stand library
import math
# To import specific function from standard library
from math import factorial
# To import specific function from standard library and add an alias 
from math import factorial as fac

# To know about functions
help(math)
help(math.factorial)

# Power of integer
2**31 - 1

# MATH
1.5e-5 == 1.5*(10^-5)
nan == Not a number
inf == infinite
int(3.3) = 3
float(7) = 7.0
bool(1) = True
bool(0) = False

divmod calculates quotient and remainder for division operator
#id gives unique id of variable ( object actually )
>>> m=8
>>> id(m)
4297370304

#dir gives all attributes of object

10/9/2017
---------
list [] mutable,ordered
Dics {} mutable,not ordered, key pairs
Str immutable ordered
bytes=str.encode("utf-8")
str=bytes.decode("utf-8")

Have two lines in between two functions in python

from math import *
from math import (factorial,sqroot)

Shebang
#!/usr/bin/env python3

__name__ == __main__ # RUNNING THE MODULE
__name__ == <module_name> # IMPORTING THE MODULE

import sys
sys.argv[0] # The python program itself
sys.argv[1] # First command line arg
sys.argv[2] # Second command line arg

11/9/2017
---------
There are no variables in python. What we see as variables are actually labels pointing to references
Always reference to object is copied to function. So any changes to argument would change the object.
It is responsibility of the function to copy before modifying argument
Positional arguments should be first in function and cannot come after keyword argument.
If we use keyword arguments only, position does not matter.
It is possible to provide default arguments to function
def binds function definition to function name. Default arguments are executed only once.
Avoid using mutable default arguments like time.ctime()

12/9/2017
---------
python objects are dynamic and strong
Object types are determined at runtime but are never implicitly converted
variable scope
    local
    enclosing
    global
    buildin
Module scope : Import statements are bound by import
Functions are bound by def

17/9/2017
---------
Tuple : Immuatable heterogenous sequence of arbitary object
a = ("sas",1,1.23) # Delimited by comma within paranthesis
a = 1,2,42.32,"ass" # Not within paranthesis, delimited by comma
a = (1,) # Single element tuple
b = () # No element tuple
a = tuple([2,1,3],[3,2,1]) # Tuple constructor
5 in (1,23,4,5) # In operator, in this case returns True
# Strings
a=;.join(["SDAS","SADAS","FDADS"]) # Output a=SDAD;SADAS;FDADS
a.split(";") # Output ["SDAS","SADAS",FDADS"]
a=halloworldboys. a.partition("world") # Creates tuple ("hello","world","boys")
>>> "a {0} b {1}".format("BSADBSA","SSADAS")
'a BSADBSA b SSADAS'
>>> "a {} b {}".format("BSADBSA","SSADAS")
'a BSADBSA b SSADAS'
>>> "a {a} b {aa}".format(a="BSADBSA",aa="SSADAS")
'a BSADBSA b SSADAS'
>>> pos=("asds",123,2.12)
>>> "pos 1 {p[0]} pos2 {p[1]} pos3 {p[2]:.1f}".format(p=pos)
'pos 1 asds pos2 123 pos3 2.1' # p[2] float truncated to one decimal digit

23/9/2017
---------
# Range returns integers which are converted to list and enumerate is used to print
>>> a=list(range(5,20,2))
>>> for i,v in enumerate(a):
...     print("i {} : v {}".format(i,v))
... 
i 0 : v 5
i 1 : v 7
i 2 : v 9
i 3 : v 11
i 4 : v 13
i 5 : v 15
i 6 : v 17
i 7 : v 19

>>> a
'asdas asdas dgrw'
# Split based on word d
>>> a.split("d")
['as', 'as as', 'as ', 'grw']
>>> s=a.split("d")
# Negative index gets last number
>>> s[-1]
'grw'
# Gets from second element upto last
>>> s[2:-1]
['as ']
#Gets from second element upto and including last
>>> s[2:]
['as ', 'grw']
# gets first two elements
>>> s[0:2]
['as', 'as as']
# gets first two elements
>>> s[:2]
['as', 'as as']
# Shallow copy. Only main list is copied. Not the elements which are same reference
>>> a=[[1,2],[1,2]]
>>> b=a[:]
>>> a
[[1, 2], [1, 2]]
>>> b
[[1, 2], [1, 2]]
>>> a[0] = [4,5]
>>> a
[[4, 5], [1, 2]]
>>> b
[[1, 2], [1, 2]]
>>> a[1].append(6)
>>> a
[[4, 5], [1, 2, 6]]
>>> b
[[1, 2], [1, 2, 6]]
# List repetition is shallow
>>> a=[[1,2]]*5
>>> a
[[1, 2], [1, 2], [1, 2], [1, 2], [1, 2]]
>>> a[0]=[3,4]
>>> a[1].append(5)
>>> a
[[3, 4], [1, 2, 5], [1, 2, 5], [1, 2, 5], [1, 2, 5]]
# Get index in list
>>> a.index([3,4])
0
>>> a.count([1,2,5])
4
# Remove element in list
>>> del a[1]
>>> a
[[3, 4], [1, 2, 5], [1, 2, 5], [1, 2, 5]]
>>> a.remove([3,4])
>>> a
[[1, 2, 5], [1, 2, 5], [1, 2, 5]]
# Insert element
>>> a.insert(1,[2,2])
>>> a
[[1, 2, 5], [2, 2], [1, 2, 5], [1, 2, 5]]
# Any mutable iterable series like list, following operation possible
a= b+c
a+=[1,2,3]
a.extend([1,2])

# Sorting, reversing
>>> a=[1,4,2,5,2,56,23,1,4,22]
>>> a.reverse()
>>> a
[22, 4, 1, 23, 56, 2, 5, 2, 4, 1]
>>> a.sort()
>>> a
[1, 1, 2, 2, 4, 4, 5, 22, 23, 56]
>>> a.sort(reverse=True)
>>> a
[56, 23, 22, 5, 4, 4, 2, 2, 1, 1]
>>> a
['aaaaa', 'aa', 'a', 'aaaa', 'a', 'aaa', 'aaaaa']
>>> a.sort(key=len)
>>> a
['a', 'a', 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaa']

# Sorting, reversing without modifying element
>>> a=[1,4,2,5,2,56,23,1,4,22]
>>> b=sorted(a)
>>> a
[1, 4, 2, 5, 2, 56, 23, 1, 4, 22]
>>> b
[1, 1, 2, 2, 4, 4, 5, 22, 23, 56]
>>> c=reversed(b)
>>> c
<list_reverseiterator object at 0x10293e4a8>
>>> list(c)
[56, 23, 22, 5, 4, 4, 2, 2, 1, 1]

#DICS
Key value pairs
Key should be immutables
Values can be mutable/immutable
# Dict constructor can be used to create from any form or list or tuple
>>> a=[[1,2],[3,4]]
>>> b=dict(a)
>>> b
{1: 2, 3: 4}
>>> a=[(1,2),(3,4)]
>>> b=dict(a)
>>> b
{1: 2, 3: 4}
>>> a=((1,2),(3,4))
>>> b=dict(a)
>>> b
{1: 2, 3: 4}
>>> a=([1,2],[3,4])
>>> b=dict(a)
>>> b
{1: 2, 3: 4}
>>> a=dict(a='1',b='2')
>>> a
{'b': '2', 'a': '1'}
>>> b=dict(a)
>>> b
{'b': '2', 'a': '1'}
>>> b.update(c='3')
>>> b
{'b': '2', 'c': '3', 'a': '1'}
>>> b['c']
'3'
>>> b.keys()
dict_keys(['b', 'c', 'a'])
>>> b.values()
dict_values(['2', '3', '1'])
>>> b.items()
dict_items([('b', '2'), ('c', '3'), ('a', '1')])
# Dict. new values can be assigned to keys


#Sets
unordered collection of unique immutable objects
>>> p={1,2,3,4,3}
>>> p
{1, 2, 3, 4}
set() contructor can be used to create set
>>> p.add(5)
>>> p.update(6)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'int' object is not iterable
>>> p.update([6])
>>> p
{1, 2, 3, 4, 5, 6}
>>> p.remove(9)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 9
>>> p.discard(9)
>>> p
{1, 2, 3, 4, 5, 6}
>>> p.discard(5)
>>> p.remove(3)
>>> p
{1, 2, 4, 6}

#Set Algebra
a.issubset(b)
a.issuperset(b)
a.isdisjoint(b) "Commutative"
a.union(b) "Commutative"
a.intersection(b) "Commutative"
a.difference(b)
a.symmetric_difference(b) "Commutative"

24/9/2017
---------
Exceptions are passed to higher levels in call stack
try,except block
pass keyword can be used for empty exception block
as keyword can be used to get the type of exception
except (TypeError,ValueError) as e:
   print("Conversion Error {}".format(str(e)))

raise keyword can be used to raise exception
raise without argument in except block would re-raise the same exception
raise ValueError("Value error")

Common Exceptions
ValueError, IndexError, KeyError,OSError,ImportError

#Do not guard against type errors
LBYL - Look before you leap # Check for errors before proceeding
EAFP - Easier to ask for forgiveness than permission  # Exception handling for errors 
EAFP Favoured in python
LBYL : Error handling in main program flow
EAFP : Error handling in seperate program flow
finally block used to execute statement at end no matter try or except executes
_________________________________________________
| Datatype | Mutable | Ordered | Unique | Pair  |
|   List   |    Y    |    Y    |    N   |   N   |
|   Set    |    Y    |    N    |    Y   |   N   |
|  Tuple   |    N    |    Y    |    N   |   N   |
|   Dict   |    Y    |    N    |    Y   |   Y   |
|   Str    |    N    |    Y    |    N   |   N   |
|  Range   |    N    |    Y    |    Y   |   N   |
-------------------------------------------------

7/10/2017
--------

Comprehension
>>> words = "hi there i am vignesh krishnan working at qualcomm".split()
>>> words
['hi', 'there', 'i', 'am', 'vignesh', 'krishnan', 'working', 'at', 'qualcomm']
>>> [len(word) for word in words]
[2, 5, 1, 2, 7, 8, 7, 2, 8]

SETS
>>> {len(str(factorial(x))) for x in range(20)}
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18}

LISTS
>>> [len(str(factorial(x))) for x in range(20)]
[1, 1, 1, 1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18]

DICS
>>> country_capital                                 {'Spain': 'Madrid', 'Japan': 'Tokyo', 'India': 'Delhi'}
>>> capital_country={capital:country for country,capital in country_capital.items()}
>>> capital_country                                 {'Madrid': 'Spain', 'Tokyo': 'Japan', 'Delhi': 'India'}

ITERABLES
>>> a=[1,2,3]
>>> iterable=iter(a)
>>> next(iterable)
1
>>> next(iterable)
2
>>> next(iterable)
3
>>> next(iterable)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
StopIteration

GENERATORS
Generators are lazy
Good generator program : ../code/yield/generators.py 
Good generator program : ../code/yield/lucas.py
>>> def gen12():
...    print("1")
...    yield 1
...    print("2")
...    yield 2
... 
>>> def nogen12():
...    print("1")
...    print("2")
... 
>>> g=gen12()
>>> ng=nogen12()
1
2
>>> type(g)
<class 'generator'>
>>> type(ng)
<class 'NoneType'>
>>> next(g)
1
1
>>> next(g)
2
2
>>> next(g)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
StopIteration
>>> next(ng)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'NoneType' object is not an iterator

GENERATOR COMPREHENSION:
>>> ten_square=(x*x for x in range(1,11))
>>> next(ten_square)
1
>>> next(ten_square)
4
>>> next(ten_square)
9
>>> next(ten_square)
16
>>> list(ten_square)
[25, 36, 49, 64, 81, 100]
>>> list(ten_square)
[]
>>> 
>>> sum((x*x for x in range(1,11)))
385

any function returns true if any of iterable argument is true
all function returns true if all of iterable argument is true
zip functions zips the input arguments into iterator of tuples
itertools has lots of functions for good iterations


15/10/2017
----------
open to open file
ARGS:
filepath
read/write/append binary/text
encoding 

binary mode : raw data, 0s and 1s 

# IN LINUX
import sys
>>> sys.getdefaultencoding()
'ascii'
# Encoding in python
https://docs.python.org/2.4/lib/standard-encodings.html

>>> f=open('wasteland.txt',mode='wt',encoding='utf-8') # Open txt file in write mode
>>> f.write("baba is a good god\n") # Peforms write
>>> f.flush() # Flush file
>>> f.close() # Close file
>>> f=open('wasteland.txt',mode='rt',encoding='utf-8') # Open txt file in read mode
>>> f.read(10) # Read 10 char
>>> f.read() # Read till EOF
>>> f.seek(0) # Sets file pointer to 0
>>> f.readline() # Reads a line in file
>>> f.readlines() # Reads lines into list
>>> f=open('wasteland.txt',mode='at',encoding='utf-8') # Appends to file
>>> f.writelines(["python is good language\n","writelines do write string list to files\n"])

>>> with  open('wasteland.txt',mode='at',encoding='utf-8') as f: # No need for explicit f.close()

#File like objects can be used as files. Duck typing
>>>type(file)
<class '_io.TextIOWrapper'>
>>>type(web_file)
<class 'http.client.HTTPResponse'>

# File provide various line oriented methods for reading, and are also iterators which yield line by line

Testing,Debugging,Distribution,Installing Code
----------------------------------------------
# Unittest moduele provides good testing code
# ../code/test/text_analyzer.py

# Debug
pdb - Inbuild python debugger module
# Launch python in debugger mode
python3 -m pdb palindrome.py
pdb.set_trace() # Used to keep breakpoints in code
# where provides where we are in code execution, call stack
list : Shows where we are in code
continue : continue execution
return : Executes till end of function
next : step execution
quit : quit debugging
print : Print the variables in stack frame

# Virtual environment
- venv ( # Check using 'python3 -m venv')
- virtualenv # BUT THIS IS WORKING
sudo apt-get install python-pip # Install pip
sudo pip install virtualenv # Install virtualenv
virtualenv -p python3 palindrome_env # Setup virtual directory
source bin/activate # Activate virtual environment
deactivate # Deactivate virtual environment

distutils - Module which install our python module in any installation

Example
virtualenv -p python3 palindrome_env
. palindrome_env/bin/activate
python setup.py install #../code/distribution/palindrome/setup.py
>>> import palindrome
>>> palindrome.__file__
'/local/mnt/workspace/vikrish/Stuff/Personal/python_learn/code/distribution/palindrome/palindrome_env/lib/python3.4/site-packages/palindrome.py'
deactivate
python3 setup.py sdist --format zip #Creates distribution zip


# Installing 3rd party modules
-pip
-anaconda ( for data science open source projects like anaconda,NumPy SciPy )
https://packaging.python.org/ - Install pip
https://pypi.python.org/pypi - pip will search for packages from this central repository
pip install --upgrade pip # Update pip

Example
virtualenv -p python3 test_env
source test_env/bin/activate
# To install 3rd party from remote server
pip install nose
>>> import nose
>>> nose.__file__
'/local/mnt/workspace/vikrish/Stuff/Personal/python_learn/code/install3rdparty/test_env/lib/python3.4/site-packages/nose/__init__.py'
# To install 3rd party from local machine
pip install palindrome-1.0.zip
# To uninstall packages
pip uninstall nose
pip uninstall palindrome-1.0.zip

-m command line argument indicates a module can be run as a script
3rd party modules are installed into site-packages directory

nose is good tool to run unittest based tests
